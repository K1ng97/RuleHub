{
  "id": "c57872c7-614f-4d7f-a40d-b78c8df2d30d",
  "name": "Assembly Loading Via CL_LoadAssembly.ps1",
  "description": "Detects calls to \"LoadAssemblyFromPath\" or \"LoadAssemblyFromNS\" that are part of the \"CL_LoadAssembly.ps1\" script. This can be abused to load different assemblies and bypass App locker controls.",
  "source": {
    "type": "sigma",
    "id": "c57872c7-614f-4d7f-a40d-b78c8df2d30d",
    "url": "https://github.com/SigmaHQ/sigma/blob/master/proc_creation_win_powershell_cl_loadassembly.yml",
    "file_path": "tmp/repos/sigma/rules/windows/process_creation/proc_creation_win_powershell_cl_loadassembly.yml"
  },
  "tags": [
    "attackdefense-evasion",
    "attackt1216"
  ],
  "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
  "references": [
    "https://bohops.com/2018/01/07/executing-commands-and-bypassing-applocker-with-powershell-diagnostic-scripts/",
    "https://lolbas-project.github.io/lolbas/Scripts/CL_LoadAssembly/"
  ],
  "severity": "medium",
  "type": "sigma",
  "status": "test",
  "created": "2022-05-21",
  "modified": "2023-08-17",
  "mitre": {
    "tactics": [
      "TA1216"
    ],
    "techniques": []
  },
  "detection": {
    "query": "selection: {\"CommandLine|contains\": [\"LoadAssemblyFromPath \", \"LoadAssemblyFromNS \"]}",
    "condition": "selection",
    "fields": []
  },
  "falsepositives": [
    "Unknown"
  ],
  "level": "medium",
  "rule_format": "standard",
  "platforms": [],
  "data_sources": [
    "windows",
    "process_creation"
  ]
}