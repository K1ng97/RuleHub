{
  "id": "b3f7a803-e802-448b-8eb2-e796b223bccc",
  "name": "Nginx ConnectWise ScreenConnect Authentication Bypass",
  "description": "The following analytic detects attempts to exploit the ConnectWise ScreenConnect CVE-2024-1709 vulnerability, which allows attackers to bypass authentication via alternate paths or channels. It leverages Nginx access logs to identify web requests to the SetupWizard.aspx page, indicating potential exploitation. This activity is significant as it can lead to unauthorized administrative access and remote code execution. If confirmed malicious, attackers could create administrative users and gain full control over the affected ScreenConnect instance, posing severe security risks. Immediate remediation by updating to version 23.9.8 or above is recommended.",
  "source": {
    "type": "splunk",
    "id": "b3f7a803-e802-448b-8eb2-e796b223bccc",
    "url": "https://github.com/splunk/security_content/blob/develop/nginx_connectwise_screenconnect_authentication_bypass.yml",
    "file_path": "tmp/repos/splunk/detections/web/nginx_connectwise_screenconnect_authentication_bypass.yml"
  },
  "tags": [
    "analytic_story",
    "asset_type",
    "cve",
    "mitre_attack_id",
    "product",
    "security_domain"
  ],
  "author": "Michael Haag, Splunk",
  "references": [
    "https://docs.splunk.com/Documentation/AddOns/released/NGINX/Sourcetypes",
    "https://gist.github.com/MHaggis/26f59108b04da8f1d870c9cc3a3c8eec",
    "https://www.huntress.com/blog/a-catastrophe-for-control-understanding-the-screenconnect-authentication-bypass",
    "https://www.huntress.com/blog/detection-guidance-for-connectwise-cwe-288-2",
    "https://www.connectwise.com/company/trust/security-bulletins/connectwise-screenconnect-23.9.8"
  ],
  "severity": "medium",
  "type": "splunk",
  "status": "production",
  "created": "2025-05-02",
  "modified": "2025-05-02",
  "mitre": {
    "tactics": [],
    "techniques": []
  },
  "detection": {
    "query": "`nginx_access_logs` uri_path IN (\"*/SetupWizard.aspx/*\",\"*/SetupWizard/\") status=200 http_method=POST  | stats count min(_time) as firstTime max(_time) as lastTime by src, dest, http_user_agent, url, uri_path, status, http_method, sourcetype, source | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `nginx_connectwise_screenconnect_authentication_bypass_filter`",
    "condition": "To implement this analytic, ensure proper logging is occurring with Nginx, access.log and error.log, and that these logs are being ingested into Splunk. STRT utilizes this nginx.conf https://gist.github.com/MHaggis/26f59108b04da8f1d870c9cc3a3c8eec to properly log as much data with Nginx.",
    "fields": []
  },
  "falsepositives": [
    "False positives are not expected, as the detection is based on the presence of web requests to the SetupWizard.aspx page, which is not a common page to be accessed by legitimate users. Note that the analytic is limited to HTTP POST and a status of 200 to reduce false positives. Modify the query as needed to reduce false positives or hunt for additional indicators of compromise."
  ],
  "level": "medium",
  "rule_format": "standard",
  "platforms": [],
  "data_sources": []
}