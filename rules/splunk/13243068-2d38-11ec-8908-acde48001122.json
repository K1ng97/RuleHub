{
  "id": "13243068-2d38-11ec-8908-acde48001122",
  "name": "ServicePrincipalNames Discovery with PowerShell",
  "description": "The following analytic detects the use of `powershell.exe` to query the domain for Service Principal Names (SPNs) using Script Block Logging EventCode 4104. It identifies the use of the KerberosRequestorSecurityToken class within the script block, which is equivalent to using setspn.exe. This activity is significant as it often precedes kerberoasting or silver ticket attacks, which can lead to credential theft. If confirmed malicious, attackers could leverage this information to escalate privileges or persist within the environment.",
  "source": {
    "type": "splunk",
    "id": "13243068-2d38-11ec-8908-acde48001122",
    "url": "https://github.com/splunk/security_content/blob/develop/serviceprincipalnames_discovery_with_powershell.yml",
    "file_path": "tmp/repos/splunk/detections/endpoint/serviceprincipalnames_discovery_with_powershell.yml"
  },
  "tags": [
    "analytic_story",
    "asset_type",
    "mitre_attack_id",
    "product",
    "security_domain"
  ],
  "author": "Michael Haag, Splunk",
  "references": [
    "https://docs.microsoft.com/en-us/windows/win32/ad/service-principal-names",
    "https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.tokens.kerberosrequestorsecuritytoken?view=netframework-4.8",
    "https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/t1208-kerberoasting",
    "https://strontic.github.io/xcyclopedia/library/setspn.exe-5C184D581524245DAD7A0A02B51FD2C2.html",
    "https://attack.mitre.org/techniques/T1558/003/",
    "https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spn-setspn-syntax.aspx",
    "https://web.archive.org/web/20220212163642/https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/",
    "https://blog.zsec.uk/paving-2-da-wholeset/",
    "https://msitpros.com/?p=3113",
    "https://adsecurity.org/?p=3466",
    "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.",
    "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63",
    "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf",
    "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"
  ],
  "severity": "medium",
  "type": "splunk",
  "status": "production",
  "created": "2025-05-02",
  "modified": "2025-05-02",
  "mitre": {
    "tactics": [],
    "techniques": []
  },
  "detection": {
    "query": "`powershell` EventCode=4104 ScriptBlockText=\"*KerberosRequestorSecurityToken*\" | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by dest signature signature_id user_id vendor_product EventID Guid Opcode Name Path ProcessID ScriptBlockId ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `serviceprincipalnames_discovery_with_powershell_filter`",
    "condition": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.",
    "fields": []
  },
  "falsepositives": [
    "False positives should be limited, however filter as needed."
  ],
  "level": "medium",
  "rule_format": "standard",
  "platforms": [],
  "data_sources": []
}