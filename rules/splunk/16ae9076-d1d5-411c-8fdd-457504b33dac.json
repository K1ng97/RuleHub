{
  "id": "16ae9076-d1d5-411c-8fdd-457504b33dac",
  "name": "ASL AWS Detect Users creating keys with encrypt policy without MFA",
  "description": "The following analytic detects the creation of AWS KMS keys with an encryption policy accessible to everyone, including external entities. It leverages AWS CloudTrail logs from Amazon Security Lake to identify `CreateKey` or `PutKeyPolicy` events where the `kms:Encrypt` action is granted to all principals. This activity is significant as it may indicate a compromised account, allowing an attacker to misuse the encryption key to target other organizations. If confirmed malicious, this could lead to unauthorized data encryption, potentially disrupting operations and compromising sensitive information across multiple entities.",
  "source": {
    "type": "splunk",
    "id": "16ae9076-d1d5-411c-8fdd-457504b33dac",
    "url": "https://github.com/splunk/security_content/blob/develop/asl_aws_detect_users_creating_keys_with_encrypt_policy_without_mfa.yml",
    "file_path": "tmp/repos/splunk/detections/cloud/asl_aws_detect_users_creating_keys_with_encrypt_policy_without_mfa.yml"
  },
  "tags": [
    "analytic_story",
    "asset_type",
    "mitre_attack_id",
    "product",
    "security_domain"
  ],
  "author": "Patrick Bareiss, Splunk",
  "references": [
    "https://rhinosecuritylabs.com/aws/s3-ransomware-part-1-attack-vector/",
    "https://github.com/d1vious/git-wild-hunt",
    "https://www.youtube.com/watch?v=PgzNib37g0M"
  ],
  "severity": "medium",
  "type": "splunk",
  "status": "production",
  "created": "2025-05-02",
  "modified": "2025-05-02",
  "mitre": {
    "tactics": [],
    "techniques": []
  },
  "detection": {
    "query": "`amazon_security_lake` api.operation=PutKeyPolicy OR api.operation=CreateKey | spath input=api.request.data path=policy output=policy | spath input=policy | rename Statement{}.Action as Action, Statement{}.Principal as Principal | eval Statement=mvzip(Action,Principal,\"|\") | mvexpand Statement | eval action=mvindex(split(Statement, \"|\"), 0) | eval principal=mvindex(split(Statement, \"|\"), 1) | search action=kms* | regex principal=\"\\*\" | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by actor.user.uid api.operation api.service.name http_request.user_agent src_endpoint.ip actor.user.account.uid cloud.provider cloud.region api.request.data | rename actor.user.uid as user api.operation as action api.service.name as dest http_request.user_agent as user_agent src_endpoint.ip as src actor.user.account.uid as vendor_account cloud.provider as vendor_product cloud.region as vendor_region | `security_content_ctime(firstTime)`| `security_content_ctime(lastTime)` |`asl_aws_detect_users_creating_keys_with_encrypt_policy_without_mfa_filter`",
    "condition": "The detection is based on Cloudtrail events from Amazon Security Lake events from Amazon Web Services (AWS), which is a centralized data lake that provides security-related data from AWS services. To use this detection, you must ingest CloudTrail logs from Amazon Security Lake into Splunk. To run this search, ensure that you ingest events using the latest version of Splunk Add-on for Amazon Web Services (https://splunkbase.splunk.com/app/1876) or the Federated Analytics App.",
    "fields": []
  },
  "falsepositives": [
    "unknown"
  ],
  "level": "medium",
  "rule_format": "standard",
  "platforms": [],
  "data_sources": []
}