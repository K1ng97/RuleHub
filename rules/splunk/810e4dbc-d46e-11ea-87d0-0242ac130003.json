{
  "id": "810e4dbc-d46e-11ea-87d0-0242ac130003",
  "name": "Detect F5 TMUI RCE CVE-2020-5902",
  "description": "The following analytic identifies remote code execution (RCE) attempts targeting F5 BIG-IP, BIG-IQ, and Traffix SDC devices, specifically exploiting CVE-2020-5902. It uses regex to detect patterns in syslog data that match known exploit strings such as \"hsqldb;\" and directory traversal sequences. This activity is significant because successful exploitation can allow attackers to execute arbitrary commands on the affected devices, leading to full system compromise. If confirmed malicious, this could result in unauthorized access, data exfiltration, or further lateral movement within the network.",
  "source": {
    "type": "splunk",
    "id": "810e4dbc-d46e-11ea-87d0-0242ac130003",
    "url": "https://github.com/splunk/security_content/blob/develop/detect_f5_tmui_rce_cve_2020_5902.yml",
    "file_path": "tmp/repos/splunk/detections/web/detect_f5_tmui_rce_cve_2020_5902.yml"
  },
  "tags": [
    "analytic_story",
    "asset_type",
    "cve",
    "mitre_attack_id",
    "product",
    "security_domain"
  ],
  "author": "Shannon Davis, Splunk",
  "references": [
    "https://www.ptsecurity.com/ww-en/about/news/f5-fixes-critical-vulnerability-discovered-by-positive-technologies-in-big-ip-application-delivery-controller/",
    "https://support.f5.com/csp/article/K52145254"
  ],
  "severity": "medium",
  "type": "splunk",
  "status": "experimental",
  "created": "2025-05-02",
  "modified": "2025-05-02",
  "mitre": {
    "tactics": [],
    "techniques": []
  },
  "detection": {
    "query": "`f5_bigip_rogue` | regex _raw=\"(hsqldb;|.*\\\\.\\\\.;.*)\" | search `detect_f5_tmui_rce_cve_2020_5902_filter`",
    "condition": "To consistently detect exploit attempts on F5 devices using the vulnerabilities contained within CVE-2020-5902 it is recommended to ingest logs via syslog.  As many BIG-IP devices will have SSL enabled on their management interfaces, detections via wire data may not pick anything up unless you are decrypting SSL traffic in order to inspect it.  I am using a regex string from a Cloudflare mitigation technique to try and always catch the offending string (..;), along with the other exploit of using (hsqldb;).",
    "fields": []
  },
  "falsepositives": [
    "unknown"
  ],
  "level": "medium",
  "rule_format": "standard",
  "platforms": [],
  "data_sources": []
}