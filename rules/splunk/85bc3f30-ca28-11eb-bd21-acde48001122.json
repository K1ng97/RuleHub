{
  "id": "85bc3f30-ca28-11eb-bd21-acde48001122",
  "name": "PowerShell Loading DotNET into Memory via Reflection",
  "description": "The following analytic detects the use of PowerShell scripts to load .NET assemblies into memory via reflection, a technique often used in malicious activities such as those by Empire and Cobalt Strike. It leverages PowerShell Script Block Logging (EventCode=4104) to capture and analyze the full command executed. This behavior is significant as it can indicate advanced attack techniques aiming to execute code in memory, bypassing traditional defenses. If confirmed malicious, this activity could lead to unauthorized code execution, privilege escalation, and persistent access within the environment.",
  "source": {
    "type": "splunk",
    "id": "85bc3f30-ca28-11eb-bd21-acde48001122",
    "url": "https://github.com/splunk/security_content/blob/develop/powershell_loading_dotnet_into_memory_via_reflection.yml",
    "file_path": "tmp/repos/splunk/detections/endpoint/powershell_loading_dotnet_into_memory_via_reflection.yml"
  },
  "tags": [
    "analytic_story",
    "asset_type",
    "mitre_attack_id",
    "product",
    "security_domain"
  ],
  "author": "Michael Haag, Teoderick Contreras Splunk",
  "references": [
    "https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly?view=net-5.0",
    "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.",
    "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63",
    "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf",
    "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/"
  ],
  "severity": "medium",
  "type": "splunk",
  "status": "production",
  "created": "2025-05-06",
  "modified": "2025-05-06",
  "mitre": {
    "tactics": [],
    "techniques": []
  },
  "detection": {
    "query": "`powershell` EventCode=4104 ScriptBlockText IN (\"*Reflection.Assembly]::Load*\",\n\"*Reflection.Assembly.Load*\", \"*UnsafeLoadFrom*\", \"*.LoadFrom(*\", \"*.LoadModule(*\",\n\"*.LoadWithPartialName*\", \"*ReflectionOnlyLoad*\", \"*Reflection.Assembly]::('daoL'[-1..-4] -join '')*\") \n| fillnull \n| stats count min(_time) as firstTime max(_time) as lastTime \nby dest signature signature_id user_id vendor_product EventID Guid Opcode Name Path ProcessID ScriptBlockId ScriptBlockText \n| `security_content_ctime(firstTime)`\n| `security_content_ctime(lastTime)` \n| `powershell_loading_dotnet_into_memory_via_reflection_filter`\n",
    "condition": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.",
    "fields": []
  },
  "falsepositives": [
    "False positives should be limited as day to day scripts do not use this method."
  ],
  "level": "medium",
  "rule_format": "standard",
  "platforms": [],
  "data_sources": []
}