{
  "id": "726959fe-316d-445c-a584-fa187d64e295",
  "name": "ASL AWS IAM Assume Role Policy Brute Force",
  "description": "The following analytic detects multiple failed attempts to assume an AWS IAM role, indicating a potential brute force attack. It leverages AWS CloudTrail logs to identify `MalformedPolicyDocumentException` errors with a status of `failure` and filters out legitimate AWS services. This activity is significant as repeated failures to assume roles can indicate an adversary attempting to guess role names, which is a precursor to unauthorized access. If confirmed malicious, this could lead to unauthorized access to AWS resources, potentially compromising sensitive data and services.",
  "source": {
    "type": "splunk",
    "id": "726959fe-316d-445c-a584-fa187d64e295",
    "url": "https://github.com/splunk/security_content/blob/develop/asl_aws_iam_assume_role_policy_brute_force.yml",
    "file_path": "tmp/repos/splunk/detections/cloud/asl_aws_iam_assume_role_policy_brute_force.yml"
  },
  "tags": [
    "analytic_story",
    "asset_type",
    "mitre_attack_id",
    "product",
    "security_domain"
  ],
  "author": "Patrick Bareiss, Splunk",
  "references": [
    "https://www.praetorian.com/blog/aws-iam-assume-role-vulnerabilities/",
    "https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration/",
    "https://www.elastic.co/guide/en/security/current/aws-iam-brute-force-of-assume-role-policy.html"
  ],
  "severity": "medium",
  "type": "splunk",
  "status": "production",
  "created": "2025-05-02",
  "modified": "2025-05-02",
  "mitre": {
    "tactics": [],
    "techniques": []
  },
  "detection": {
    "query": "`amazon_security_lake` api.operation=\"AssumeRole\" \"api.response.error\"=AccessDenied | bucket _time span=1h | stats count as failures min(_time) as firstTime max(_time) as lastTime values(api.operation) as api.operation values(api.service.name) as api.service.name values(http_request.user_agent) as http_request.user_agent values(src_endpoint.ip) as src_ip values(actor.user.account.uid) as actor.user.account.uid values(cloud.provider) as cloud.provider values(cloud.region) as cloud.region by _time actor.user.uid | where failures >= 3 | rename actor.user.uid as user api.operation as action api.service.name as dest http_request.user_agent as user_agent src_endpoint.ip as src actor.user.account.uid as vendor_account cloud.provider as vendor_product cloud.region as vendor_region | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `asl_aws_iam_assume_role_policy_brute_force_filter`",
    "condition": "The detection is based on Amazon Security Lake events from Amazon Web Services (AWS), which is a centralized data lake that provides security-related data from AWS services. To use this detection, you must ingest CloudTrail logs from Amazon Security Lake into Splunk. To run this search, ensure that you ingest events using the latest version of Splunk Add-on for Amazon Web Services (https://splunkbase.splunk.com/app/1876) or the Federated Analytics App.",
    "fields": []
  },
  "falsepositives": [
    "This detection will require tuning to provide high fidelity detection capabilties. Tune based on src addresses (corporate offices, VPN terminations) or by groups of users."
  ],
  "level": "medium",
  "rule_format": "standard",
  "platforms": [],
  "data_sources": []
}