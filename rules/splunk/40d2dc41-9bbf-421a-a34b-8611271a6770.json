{
  "id": "40d2dc41-9bbf-421a-a34b-8611271a6770",
  "name": "Internal Vertical Port Scan",
  "description": "This analytic detects instances where an internal host attempts to communicate with over 500 ports on a single destination IP address. It includes filtering criteria to exclude applications performing scans over ephemeral port ranges, focusing on potential reconnaissance or scanning activities. Monitoring network traffic logs allows for timely detection and response to such behavior, enhancing network security by identifying and mitigating potential threats promptly.",
  "source": {
    "type": "splunk",
    "id": "40d2dc41-9bbf-421a-a34b-8611271a6770",
    "url": "https://github.com/splunk/security_content/blob/develop/internal_vertical_port_scan.yml",
    "file_path": "tmp/repos/splunk/detections/network/internal_vertical_port_scan.yml"
  },
  "tags": [
    "analytic_story",
    "asset_type",
    "mitre_attack_id",
    "product",
    "security_domain"
  ],
  "author": "Dean Luxton",
  "references": [],
  "severity": "medium",
  "type": "splunk",
  "status": "production",
  "created": "2025-05-02",
  "modified": "2025-05-02",
  "mitre": {
    "tactics": [],
    "techniques": []
  },
  "detection": {
    "query": "| tstats `security_content_summariesonly` values(All_Traffic.action) as action values(All_Traffic.src_category) as src_category values(All_Traffic.dest_zone) as dest_zone values(All_Traffic.src_zone) as src_zone values(All_Traffic.src_port) as src_port count from datamodel=Network_Traffic where All_Traffic.src_ip IN (\"10.0.0.0/8\",\"172.16.0.0/12\",\"192.168.0.0/16\") by All_Traffic.src_ip All_Traffic.dest_port All_Traffic.dest_ip All_Traffic.transport span=1s _time | `drop_dm_object_name(\"All_Traffic\")` | eval gtime=_time | bin span=1h gtime | stats min(_time) as _time values(action) as action dc(eval(if(dest_port<1024 AND transport=\"tcp\",dest_port,null))) as privilegedDestTcpPortCount dc(eval(if(transport=\"tcp\",dest_port,null))) as totalDestTcpPortCount dc(eval(if(dest_port<1024 AND transport=\"udp\",dest_port,null))) as privilegedDestUdpPortCount dc(eval(if(transport=\"udp\",dest_port,null))) as totalDestUdpPortCount values(src_category) as src_category values(dest_zone) as dest_zone values(src_zone) as src_zone by src_ip dest_ip transport gtime | eval totalDestPortCount=totalDestUdpPortCount+totalDestTcpPortCount, privilegedDestPortCount=privilegedDestTcpPortCount+privilegedDestUdpPortCount| where (totalDestPortCount>=500 AND privilegedDestPortCount>=20) | fields - gtime | `internal_vertical_port_scan_filter`",
    "condition": "To properly run this search, Splunk needs to ingest data from networking telemetry sources such as firewalls, NetFlow, or host-based networking events. Ensure that the Network_Traffic data model is populated to enable this search effectively.",
    "fields": []
  },
  "falsepositives": [
    "Unknown"
  ],
  "level": "medium",
  "rule_format": "standard",
  "platforms": [],
  "data_sources": []
}