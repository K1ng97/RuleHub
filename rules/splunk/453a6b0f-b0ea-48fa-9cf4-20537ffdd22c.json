{
  "id": "453a6b0f-b0ea-48fa-9cf4-20537ffdd22c",
  "name": "Windows UAC Bypass Suspicious Child Process",
  "description": "The following analytic detects when an executable known for User Account Control (UAC) bypass exploitation spawns a child process in a user-controlled location or a command shell executable (e.g., cmd.exe, powershell.exe). This detection leverages Sysmon EventID 1 data, focusing on high or system integrity level processes with specific parent-child process relationships. This activity is significant as it may indicate an attacker has successfully used a UAC bypass exploit to escalate privileges. If confirmed malicious, this could allow the attacker to execute arbitrary commands with elevated privileges, potentially compromising the entire system.",
  "source": {
    "type": "splunk",
    "id": "453a6b0f-b0ea-48fa-9cf4-20537ffdd22c",
    "url": "https://github.com/splunk/security_content/blob/develop/windows_uac_bypass_suspicious_child_process.yml",
    "file_path": "tmp/repos/splunk/detections/endpoint/windows_uac_bypass_suspicious_child_process.yml"
  },
  "tags": [
    "analytic_story",
    "asset_type",
    "mitre_attack_id",
    "product",
    "security_domain"
  ],
  "author": "Steven Dick",
  "references": [
    "https://attack.mitre.org/techniques/T1548/002/",
    "https://atomicredteam.io/defense-evasion/T1548.002/",
    "https://hadess.io/user-account-control-uncontrol-mastering-the-art-of-bypassing-windows-uac/",
    "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/"
  ],
  "severity": "medium",
  "type": "splunk",
  "status": "production",
  "created": "2025-05-02",
  "modified": "2025-05-02",
  "mitre": {
    "tactics": [],
    "techniques": []
  },
  "detection": {
    "query": "| tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_integrity_level IN (\"high\",\"system\") AND Processes.parent_process_name IN (`uacbypass_process_name`) AND (Processes.process_name IN (\"cmd.exe\",\"powershell.exe\",\"pwsh.exe\",\"wscript\",\"cscript.exe\",\"bash.exe\",\"werfault.exe\") OR Processes.process IN (\"*\\\\\\\\*\",\"*\\\\Users\\\\*\",\"*\\\\ProgramData\\\\*\",\"*\\\\Temp\\\\*\")) by Processes.action Processes.dest Processes.original_file_name Processes.parent_process Processes.parent_process_exec Processes.parent_process_guid Processes.parent_process_id Processes.parent_process_name Processes.parent_process_path Processes.process Processes.process_exec Processes.process_guid Processes.process_hash Processes.process_id Processes.process_integrity_level Processes.process_name Processes.process_path Processes.user Processes.user_id Processes.vendor_product | `drop_dm_object_name(Processes)` | where parent_process_name != process_name | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `windows_uac_bypass_suspicious_child_process_filter`",
    "condition": "Target environment must ingest sysmon data, specifically Event ID 1 with process integrity level data.",
    "fields": []
  },
  "falsepositives": [
    "Including Werfault.exe may cause some unintended false positives related to normal application faulting, but is used in a number of UAC bypass techniques."
  ],
  "level": "medium",
  "rule_format": "standard",
  "platforms": [],
  "data_sources": []
}