{
  "id": "0d718b52-c9f1-11eb-bc61-acde48001122",
  "name": "Powershell Processing Stream Of Data",
  "description": "The following analytic detects suspicious PowerShell script execution involving compressed stream data processing, identified via EventCode 4104. It leverages PowerShell Script Block Logging to flag scripts using `IO.Compression`, `IO.StreamReader`, or decompression methods. This activity is significant as it often indicates obfuscated PowerShell or embedded .NET/binary execution, which are common tactics for evading detection. If confirmed malicious, this behavior could allow attackers to execute hidden code, escalate privileges, or maintain persistence within the environment.",
  "source": {
    "type": "splunk",
    "id": "0d718b52-c9f1-11eb-bc61-acde48001122",
    "url": "https://github.com/splunk/security_content/blob/develop/powershell_processing_stream_of_data.yml",
    "file_path": "tmp/repos/splunk/detections/endpoint/powershell_processing_stream_of_data.yml"
  },
  "tags": [
    "analytic_story",
    "asset_type",
    "mitre_attack_id",
    "product",
    "security_domain"
  ],
  "author": "Teoderick Contreras, Splunk",
  "references": [
    "https://medium.com/@ahmedjouini99/deobfuscating-emotets-powershell-payload-e39fb116f7b9",
    "https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell",
    "https://blog.palantir.com/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63",
    "https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/59c1814829f18782e24f1fe2/1505853768977/Windows+PowerShell+Logging+Cheat+Sheet+ver+Sept+2017+v2.1.pdf",
    "https://www.crowdstrike.com/blog/investigating-powershell-command-and-script-logging/",
    "https://www.splunk.com/en_us/blog/security/hunting-for-malicious-powershell-using-script-block-logging.html",
    "https://thedfirreport.com/2023/05/22/icedid-macro-ends-in-nokoyawa-ransomware/"
  ],
  "severity": "medium",
  "type": "splunk",
  "status": "production",
  "created": "2025-05-06",
  "modified": "2025-05-06",
  "mitre": {
    "tactics": [],
    "techniques": []
  },
  "detection": {
    "query": "`powershell` EventCode=4104 ScriptBlockText = \"*IO.Compression.*\" OR ScriptBlockText = \"*IO.StreamReader*\" OR ScriptBlockText = \"*]::Decompress*\" | fillnull | stats count min(_time) as firstTime max(_time) as lastTime by dest signature signature_id user_id vendor_product EventID Guid Opcode Name Path ProcessID ScriptBlockId ScriptBlockText | `security_content_ctime(firstTime)` | `security_content_ctime(lastTime)` | `powershell_processing_stream_of_data_filter`",
    "condition": "To successfully implement this analytic, you will need to enable PowerShell Script Block Logging on some or all endpoints. Additional setup here https://docs.splunk.com/Documentation/UBA/5.0.4.1/GetDataIn/AddPowerShell#Configure_module_logging_for_PowerShell.",
    "fields": []
  },
  "falsepositives": [
    "powershell may used this function to process compressed data."
  ],
  "level": "medium",
  "rule_format": "standard",
  "platforms": [],
  "data_sources": []
}